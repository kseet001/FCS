# Homework 5 - Question 3
# With your AES-CBC implementation encrypt 160MB of zeros:
# "\x00"*int(1.6*10**8)
# under 128-bit long zeroed key and IV. What is the last 128 bits of the ciphertext?
# Compare efficiency (time) of your implementation with a chosen library or tool that offers AES-CBC.

from Crypto.Cipher import AES
from binascii import hexlify, unhexlify
import pyaes


class CustomAES:
    # TODO: implement custom AES-CBC algorithm class

    def __init__(self, key, IV):
        self.key = key
        self.IV = IV
        self.rounds = self.num_of_rounds(key.encode())

        self.s_box = (
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
        )

        self.s_box_inv = (
            0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
            0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
            0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
            0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
            0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
            0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
            0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
            0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
            0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
            0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
            0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
            0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
            0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
            0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
        )

        self.rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
                     0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91]

    def encrypt(self, plaintext):

        state = []
        ciphertext = ""
        key = []
        IV = []

        for i in range(0, 16, 1):
            state.append(ord(plaintext[i]) ^ ord(self.IV[i]))
            key.append(ord(self.key[i]))
            IV.append(ord(self.IV[i]))

        # Expand the keys
        expanded_key = self.key_expansion(key)

        self.add_round_key(state, key, 0)

        # Repeated Rounds
        for i in range(0, self.rounds, 1):
            self.sub_bytes(state)
            self.shift_rows(state)
            self.mix_columns(state)
            self.add_round_key(state, expanded_key, 16 * (i+1))

        # Final round
        self.sub_bytes(state)
        self.shift_rows(state)
        self.add_round_key(state, expanded_key, 160)

        # Copy state over to ciphertext
        for i in range(0, 16, 1):
            ciphertext += chr(state[i])

        return ciphertext

    def key_expansion_core(self, a, b):
        # Rotate left
        tmp = a[0]
        a[0] = a[1]
        a[1] = a[2]
        a[2] = a[3]
        a[3] = tmp

        # S-Box four bytes
        a[0] = self.s_box[a[0]]
        a[1] = self.s_box[a[1]]
        a[2] = self.s_box[a[2]]
        a[3] = self.s_box[a[3]]

        # RCon
        a[0] ^= self.rcon[b]

        return a

    def key_expansion(self, input_key):

        expanded_key = []

        # The first 16 bytes are the original key
        for i in range(0, 16, 1):
            expanded_key.append(input_key[i])

        bytes_generated = 16  # We have generated 16 bytes so far
        rcon_iteration = 1  # Rcon iteration begins at 1
        tmp = []  # Temporary storage for core

        while bytes_generated < 176:
            # Read 4 bytes for the core
            for i in range(0, 4, 1):
                tmp.append(expanded_key[i + bytes_generated - 4])

            # Perform core once for each 16 bytes
            if bytes_generated % 16 == 0:
                tmp = self.key_expansion_core(tmp, rcon_iteration - 1)
                rcon_iteration += 1

            # XOR tmp with [bytes_generated - 16], and store in expanded keys
            for i in range(0, 4, 1):
                expanded_key.append(expanded_key[bytes_generated - 16] ^ tmp[i])
                bytes_generated += 1

        return expanded_key

    def sub_bytes(self, state):
        for i in range(0, 16, 1):
            state[i] = self.s_box[state[i]]

        return state

    # Shift row
    def shift_rows(self, state):

        tmp = [state[0], state[5], state[10], state[15], state[4], state[9], state[14], state[3], state[8], state[13],
               state[2], state[7], state[12], state[1], state[6], state[11]]

        '''
        tmp[0] = state[0]
        tmp[1] = state[5]
        tmp[2] = state[10]
        tmp[3] = state[15]

        tmp[4] = state[4]
        tmp[5] = state[9]
        tmp[6] = state[14]
        tmp[7] = state[3]

        tmp[8] = state[8]
        tmp[9] = state[13]
        tmp[10] = state[2]
        tmp[11] = state[7]

        tmp[12] = state[12]
        tmp[13] = state[1]
        tmp[14] = state[6]
        tmp[15] = state[11]
        '''

        return tmp

    def mix_columns(self, state):

        # Initialise tmp array
        tmp = []
        for i in range(0, 16, 1):
            tmp.append(0)

        tmp[0] = gmul(0x02, state[0]) ^ gmul(0x03, state[1]) ^ state[2] ^ state[3]
        tmp[1] = state[0] ^ gmul(0x02, state[1]) ^ gmul(0x03, state[2]) ^ state[3]
        tmp[2] = state[0] ^ state[1] ^ gmul(0x02, state[2]) ^ gmul(0x03, state[3])
        tmp[3] = gmul(0x03, state[0]) ^ state[1] ^ state[2] ^ gmul(0x02, state[3])

        tmp[4] = gmul(0x02, state[4]) ^ gmul(0x03, state[5]) ^ state[6] ^ state[7]
        tmp[5] = state[4] ^ gmul(0x02, state[5]) ^ gmul(0x03, state[6]) ^ state[7]
        tmp[6] = state[4] ^ state[5] ^ gmul(0x02, state[6]) ^ gmul(0x03, state[7])
        tmp[7] = gmul(0x03, state[4]) ^ state[5] ^ state[6] ^ gmul(0x02, state[7])

        tmp[8] = gmul(0x02, state[8]) ^ gmul(0x03, state[9]) ^ state[10] ^ state[11]
        tmp[9] = state[8] ^ gmul(0x02, state[9]) ^ gmul(0x03, state[10]) ^ state[11]
        tmp[10] = state[8] ^ state[9] ^ gmul(0x02, state[10]) ^ gmul(0x03, state[11])
        tmp[11] = gmul(0x03, state[8]) ^ state[9] ^ state[10] ^ gmul(0x02, state[11])

        tmp[12] = gmul(0x02, state[12]) ^ gmul(0x03, state[13]) ^ state[14] ^ state[15]
        tmp[13] = state[12] ^ gmul(0x02, state[13]) ^ gmul(0x03, state[14]) ^ state[15]
        tmp[14] = state[12] ^ state[13] ^ gmul(0x02, state[14]) ^ gmul(0x03, state[15])
        tmp[15] = gmul(0x03, state[12]) ^ state[13] ^ state[14] ^ gmul(0x02, state[15])

        for i in range(0, 16, 1):
            state[i] = tmp[i]

    # XOR the state with a round key
    def add_round_key(self, state, round_key, start_index):

        for i in range(0, 16, 1):
            state[i] ^= round_key[i+start_index]  # XOR the state with round key

    def num_of_rounds(self, key):

        key_size = hexlify(key).__len__() / 2 * 8  # Divide by two because 2 hexadecimal makes 1 byte

        if key_size == 128:
            return 10
        elif key_size == 192:
            return 12
        elif key_size * 8 == 256:
            return 14


def gmul(byte1, byte2):
    byte3 = 0

    for i in range(0, 8, 1):
        if (byte2 & 1) != 0:
            byte3 ^= byte1

        hi_bit_set = (byte1 & 0x80) != 0

        byte1 << 1

        if hi_bit_set:
            byte1 ^= 0x1B

        byte2 >> 1

    return byte3


def int_to_bytes(x):
    return x.to_bytes((x.bit_length() + 7) // 8, 'big')


def int_from_bytes(xbytes):
    return int.from_bytes(xbytes, 'big')


def main():
    # Define plaintext, key and IV
    # plaintext = "\x00" * int(1.6 * 10 ** 8)    # 160 MB
    plaintext = "\x00" * int(16)  # 16 bytes
    key = "\x00" * 16  # 128 bits key
    IV = "\x00" * 16  # 128 bits initialisation vector

    # Print results from custom AES
    customCipher = CustomAES(key, IV)
    ciphertext1 = customCipher.encrypt(plaintext)
    print("\nResults from our custom AES-CBC library: ")
    print(ciphertext1.encode())

    # Print results from known AES library like pycrypto
    encryptor = AES.new(key, AES.MODE_CBC, IV)
    ciphertext = encryptor.encrypt(plaintext)
    # c1 = hexlify(ciphertext)
    # c1 = c1[c1.__len__() - 32:]
    print("\nResults from pycrypto library:")
    print(ciphertext)
    # print(unhexlify(c1))
    # print(key.__len__())

    # PYaes
    aes = pyaes.AESModeOfOperationCBC(key, IV)
    aes.encrypt(plaintext)

    print("Done!")


if __name__ == '__main__':
    main()
